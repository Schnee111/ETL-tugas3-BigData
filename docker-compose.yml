services:
  postgres:
    container_name: postgres-db
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_CONFIG: "-c lock_timeout=30000"
    networks:
      - saham_net
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    container_name: airflow-init
    image: apache/airflow:2.6.3
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    command: |
      bash -c '
        airflow db init &&
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
      '
    networks:
      - saham_net

  airflow-webserver:
    container_name: airflow-webserver
    image: apache/airflow:2.6.3
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - saham_net
    volumes:
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt 
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ./output:/opt/airflow/output
    command: airflow webserver
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow 
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    ports:
      - "8080:8080"

  airflow-scheduler: 
    container_name: airflow-scheduler
    image: apache/airflow:2.6.3
    command: airflow scheduler
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - saham_net
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ./output:/opt/airflow/output 
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow 

  api: #ini udh aman
    build:
      context: ./api
    image: api
    container_name: backend_api
    ports:
      - "5000:5000"
    networks:
      - saham_net

  dashboard: # aman
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    image: next-dashboard:latest
    container_name: dashboard
    ports:
      - "3000:3000"
    networks:
      - saham_net
    environment:
      - NODE_ENV=production

  extract_yfinance: #ini udh aman
    profiles: ["dev"]
    build:
      context: . 
      dockerfile: extract/Dockerfile
    image: extraction  # Nama image yang digunakan
    container_name: extract_yfinance
    volumes:
      - ./output:/app/output  # Mount folder output dari host ke container
    environment:
      YFINANCE_OUTPUT_PATH: /app/output/yfinance_output.json
    command: ["python", "yfinance_extract.py"]  # Menjalankan yfinance_extract.py

  extract_idx: #ini udh aman
    profiles: ["dev"]
    build:
      context: .  # Path to the root directory, not just extract
      dockerfile: extract/Dockerfile
    image: extraction
    container_name: extract_idx
    volumes:
      - ./output:/app/output
      - ./output/idx_zip:/output/idx_zip
      - ./output/idx_extracted:/output/idx_extracted
      - ./output/debug(ss):/screenshot
      
    environment:
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        limits:
          memory: 2G
    shm_size: '2G'  # Shared memory untuk Chrome
    restart: on-failure
    command: ["python", "idx_extract.py"]

  extract_iqplus:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: extract/Dockerfile
    image: extraction
    container_name: extract_iqplus
    volumes:
      - ./output:/app/output
    environment:
      IQPLUS_OUTPUT_PATH: /app/output/iqplus_output.json
    command: >
      sh -c "python iqplus_extract.py --category market --output /app/output/ --pages 5"

  transform_idx:
    profiles: ["dev"]
    build:
      context: ./transform  # The directory containing your transform code
    image: transformer
    container_name: transform_idx
    volumes:
      - ./output:/app/output  # Mount the output directory for saving results
      - ./output/idx_extracted:/app/extract/idx_extracted  # Mount the extracted data folder from output
    environment:
      OUTPUT_PATH: /app/output/idx_output.json
      INPUT_PATH: /app/output/idx_extracted
    command: ["python", "idx_transform.py"]  # Command to run your transform script

  transform_iqplus:
    profiles: ["dev"]
    build:
      context: ./transform  # The directory containing your transform code
    image: transformer
    container_name: transform_iqplus
    networks:
      - saham_net
    volumes:
      - ./output:/app/output  # Mount the output directory for saving results
    environment:
      OUTPUT_PATH: /app/output
      INPUT_PATH: /app/output
      OLLAMA_API: http://ollama:11434
    command: >
      sh -c "python iqplus_transform.py --category market"

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_NUM_PARALLEL: 2 
    networks:
      - saham_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 10G

  load_yfinance:
    profiles: ["dev"]
    build:
      context: ./load
      dockerfile: Dockerfile
    image: loader
    container_name: load_yfinance
    volumes:
      - ./output:/app/output
    environment:
      MONGO_COLLECTION: "yfinance_data_testing"
      INPUT_PATH: /app/output/yfinance_output.json

  load_idx:
    profiles: ["dev"]
    build:
      context: ./load
      dockerfile: Dockerfile
    image: loader
    container_name: load_idx
    volumes:
      - ./output:/app/output
    environment:
      MONGO_COLLECTION: "idx_data_testing"
      INPUT_PATH: /app/output/idx_output.json
      
  load_iqplus:
    profiles: ["dev"]
    build:
      context: ./load
      dockerfile: Dockerfile
    image: loader
    container_name: load_iqplus
    volumes:
      - ./output:/app/output
    environment:
      MONGO_COLLECTION: "iqplus_data_testing"
      INPUT_PATH: /app/output/iqplus_output.json

volumes:
  postgres-db:   
  ollama_data:

networks:
  saham_net:
    name: saham_net
    driver: bridge